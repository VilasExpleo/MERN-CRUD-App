<?xml version="1.0" encoding="UTF-8"?>

<schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:hmi="urn:translationproject"
	targetNamespace="urn:translationproject" elementFormDefault="qualified"
	attributeFormDefault="unqualified">


	<include schemaLocation="Comment.xsd" />
	<include schemaLocation="Label.xsd" />

	<include schemaLocation="TextNodeRef.xsd" />


	<!-- *************************** -->
	<!-- DEFINITION OF COMPLEX-TYPES -->
	<!-- *************************** -->

	<complexType name="GroupNode">
		<annotation>
			<documentation>A GroupNode is an element for structuring a project. A
				tree-hierarchy can by formed by this. A GroupNode can contain other
				GroupNodes or TextNodes.
			</documentation>
		</annotation>
		<sequence>
			<choice minOccurs="0" maxOccurs="unbounded">
				<annotation>
					<documentation>Other GroupNodes or TextNodeRefs can be children of
						a GroupNode
					</documentation>
				</annotation>
				<element name="GroupNode" type="hmi:GroupNode" minOccurs="0"
					maxOccurs="1">
					<annotation>
						<documentation>A group can contain other groups as child elements.
						</documentation>
					</annotation>
				</element>
				<element name="TextNodeRef" type="hmi:TextNodeRef"
					minOccurs="0" maxOccurs="1">
					<annotation>
						<documentation>A group can contain references to TextNodes as
							child elements.
						</documentation>
					</annotation>
				</element>
			</choice>
			<element name="Comments" type="hmi:CommentList" minOccurs="0"
				maxOccurs="1">
				<annotation>
					<documentation>Groups can have their own list of comments.
					</documentation>
				</annotation>
			</element>
			<element name="Labels" type="hmi:LabelList" minOccurs="0"
				maxOccurs="1">
				<annotation>
					<documentation>Labels can be attached to groups. By this
						label-functionality like 'filtering' and 'searching' is available
						for groups.
					</documentation>
				</annotation>
			</element>
		</sequence>

		<attribute name="Name" type="string" use="required">
			<annotation>
				<documentation>This is the 'user-known' name of the group.
				</documentation>
			</annotation>
		</attribute>
		<attribute name="Id" type="hmi:GroupNodeId" use="required">
			<annotation>
				<documentation>This is the unique ID of a group.</documentation>
			</annotation>
		</attribute>
		<attribute name="Type" type="hmi:GroupType" use="optional">
			<annotation>
				<documentation>Defines the type of the group.</documentation>
			</annotation>
		</attribute>

	</complexType>


	<!-- ************************** -->
	<!-- DEFINITION OF SIMPLE-TYPES -->
	<!-- ************************** -->

	<simpleType name="GroupTypePredefined">
		<annotation>
			<documentation>
				The predefined types of groups. A group gets a special
				meaning by its type, e.g. a 'View' can have a graphical
				representation.
			</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="StandardGroup">
				<annotation>
					<documentation>This is the standard 'fallback'-group.
					</documentation>
				</annotation>
			</enumeration>
			<enumeration value="Project">
				<annotation>
					<documentation>This group represents a project. This is usually the
						topmost group in the group-hierarchy.
					</documentation>
				</annotation>
			</enumeration>
			<enumeration value="Module">
				<annotation>
					<documentation>A project can be split-up in modules like
						'Navigation', 'Tuner', 'Car' and so on.
					</documentation>
				</annotation>
			</enumeration>
			<enumeration value="View">
				<annotation>
					<documentation>A view represents on screen of the system. A view
						can have a graphical representation which can be visualized.
					</documentation>
				</annotation>
			</enumeration>
			<enumeration value="Widget">
				<annotation>
					<documentation>A widget is the building-block of a view. A view is
						made up from widgets. Many widgets contain text (e.g. a 'label' or
						'button') which has to be translated.
					</documentation>
				</annotation>
			</enumeration>
			<enumeration value="List">
				<annotation>
					<documentation>This is a general purpose container-group for other
						elements, e.g. text-arrays can be well-arranged in such a group.
					</documentation>
				</annotation>
			</enumeration>
			<enumeration value="Ddb">
				<annotation>
					<documentation>Elements of Dynamic Drop Down Boxes (DDBs) are
						arranged in such a group.
					</documentation>
				</annotation>
			</enumeration>
			<enumeration value="ConcatText">
				<annotation>
					<documentation>Elements of Concatenated Texts are arranged in such
						a group.
					</documentation>
				</annotation>
			</enumeration>
			<enumeration value="Teleprompter">
				<annotation>
					<documentation>Elements of Teleprompters are arranged in such a
						group.
					</documentation>
				</annotation>
			</enumeration>
		</restriction>
	</simpleType>

	<simpleType name="GroupTypeUserdefined">
		<annotation>
			<documentation>
				User-defined group-types are allowed too. Every
				user-defined group will get the behaviour of a 'StandardGroup' of
				'GroupTypePredefined'.
			</documentation>
		</annotation>
		<restriction base="string" />
	</simpleType>

	<simpleType name="GroupType">
		<annotation>
			<documentation>
				A 'GroupNode' can have one of the predefined types in
				'GroupTypePredefined' or a user-defined type 'GroupTypeUserdefined'.
			</documentation>
		</annotation>
		<union memberTypes="hmi:GroupTypePredefined hmi:GroupTypeUserdefined" />
	</simpleType>

	<simpleType name="GroupNodeId">
		<annotation>
			<documentation>GroupNodes have this ID-type. IDs must be unique
				throughout the project.
			</documentation>
		</annotation>
		<restriction base="long"></restriction>
	</simpleType>

</schema>