<?xml version="1.0" encoding="UTF-8"?>

<schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:hmi="urn:translationproject"
	targetNamespace="urn:translationproject" elementFormDefault="qualified"
	attributeFormDefault="unqualified">


	<!-- *************************** -->
	<!-- DEFINITION OF COMPLEX-TYPES -->
	<!-- *************************** -->

	<complexType name="PlaceholderManager">

		<annotation>
			<documentation>Dynamic content of a text can be expressed by
				placeholders, e.g. 'There are %1 messages available.'. The
				PlaceholderManager manages the possible placeholders of a project.
				Different types of placeholders are possible in a single project. If
				the expected placeholders of a project are known then it should be
				possible to extract placeholders from the source-texts of
				text-nodes. While projects use individual representations of
				placeholders the software should only use one standardized internal
				representation of placeholders. So for storing purposes, e.g. in a
				translation memory or in the sample text catalog all placeholders
				should look the same. When running an export to the target the
				internal representations must be converted back to the individual
				project representations.
			</documentation>
		</annotation>

		<sequence>
			<annotation>
				<documentation>The expected/possible placeholders of a project are
					stored in this container.
				</documentation>
			</annotation>
			<element name="ExpectedPlaceholders" type="hmi:SourcePlaceholderList"
				minOccurs="0" maxOccurs="1" />
		</sequence>

	</complexType>

	<complexType name="PlaceholderSource">

		<annotation>
			<documentation>This type defines the appearance of a placeholder in
				the source-text.
			</documentation>
		</annotation>

		<attribute name="Type" type="hmi:PlaceholderType" use="required">
			<annotation>
				<documentation>
					The type of the placeholder. See hmi:PlaceholderType.
				</documentation>
			</annotation>
		</attribute>

		<attribute name="UserdefinedType" type="string" use="optional">
			<annotation>
				<documentation>
					If the placeholder has the userdefined type then it
					is specified here how the userdefined type looks like. For all
					other types this attribute is ignored.
				</documentation>
			</annotation>
		</attribute>

	</complexType>

	<complexType name="SourcePlaceholderList">
		<annotation>
			<documentation>This is the container for expected placeholders of a
				project.
			</documentation>
		</annotation>
		<sequence>
			<element name="Placeholder" type="hmi:PlaceholderSource"
				minOccurs="0" maxOccurs="unbounded" />
		</sequence>
	</complexType>


	<!-- ************************** -->
	<!-- DEFINITION OF SIMPLE-TYPES -->
	<!-- ************************** -->

	<simpleType name="PlaceholderType">
		<annotation>
			<documentation>How does place holders appear in the source?
			</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="%n">
				<annotation>
					<documentation>The source uses this notation for place holders.
					</documentation>
				</annotation>
			</enumeration>
			<enumeration value="${n}">
				<annotation>
					<documentation>The source uses this notation for place holders.
					</documentation>
				</annotation>
			</enumeration>
			<enumeration value="[%n]">
				<annotation>
					<documentation>The source uses this notation for place holders.
					</documentation>
				</annotation>
			</enumeration>
			<enumeration value="Userdefined">
				<annotation>
					<documentation>If the source uses a notation of a place holder
						which is not one of the other types, then this value can be used.
					</documentation>
				</annotation>
			</enumeration>
		</restriction>
	</simpleType>

</schema>